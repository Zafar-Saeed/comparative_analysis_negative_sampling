import os
import time
# my files or classes
import util
from run_experiments import run_experiment
import concurrent.futures

# IMPORTS FROM KGE-RL
from negateive_samplers.kge_rl import data_loader

def main(exp_configs_path,data_path, dataset_name=None, is_code_testing=False, is_model_test=False):

    # use exp_config for load all configs from data_path/exp_configs
    print("***** Running experiment manager [Parallel Processing] *****")
    
    exp_configurations = util.load_config_files(os.path.join(data_path, exp_configs_path), "json")

    if exp_configurations is not None:

        # Determine the optimum number of threads based on CPU capacity
        num_threads = os.cpu_count()
        print("\tMaximum workers on this machine: {}".format(num_threads))
        all_config_keys = exp_configurations.keys()
        start_time = time.time()
        # Use ThreadPoolExecutor to execute the function calls in separate threads
        with concurrent.futures.ProcessPoolExecutor(max_workers=num_threads) as executor:
        # with concurrent.futures.ThreadPoolExecutor(max_workers=num_threads) as executor:
            futures = []
            for key in all_config_keys:
                
                # for running all the experiments, I need to load all the config files in folder experiment_specs and move the following code in saperate function for running experiments in parallel
                # in that function I also need to check if some code has crashed and what files are present the the result_dir. 
                # If the trained model is saved, then I might need to resume for evaluation process only
                config = exp_configurations[key]
                config["is_dev"] = True
                config["dataset_name"] = dataset_name # dataset name is not give in autogenerated configs, therefore, dataset name is received in parameters

                args = (config,data_path, is_code_testing, dataset_name, is_model_test)

                future = executor.submit(run_experiment, *args)
                futures.append(future)
    
            # Ensure all futures are completed
            for future in concurrent.futures.as_completed(futures):
                future.result()  # This will raise an exception if the function call failed

                # run_experiment(exp_configurations[key], data_path, is_code_testing, dataset_name, is_model_test)
        end_time = time.time()
        total_execution_time = "hours: {}, minutes: {}, seconds: {}".format(*util.time_difference(start_time, end_time))
        print("Total Execution Time: {}".format(total_execution_time))

    else:
        print("Configuration files do not exist on path: {}".format(exp_configs_path))
    

import argparse

if __name__=='__main__':
    # parser = argparse.ArgumentParser()
    # parser.add_argument('exp_configs_path')
    # parser.add_argument('data_path')
    # #parser.add_argument('test_dataset_name', type=str, default=None, nargs ='?')
    # parser.add_argument('dataset_name')
    # parser.add_argument('--test_code', dest='is_code_testing', action='store_true', help='A boolean flag')
    # parser.add_argument('--test_model', dest='is_model_testing', action='store_true', help='A boolean flag')
    
    # args = parser.parse_args()
    # main(args.exp_configs_path,args.data_path, args.dataset_name, args.is_code_testing, args.is_model_testing)
    main("experiment_specs", "./data/", "FB15K", is_code_testing=False, is_model_test=False)

