import os
# my files or classes
import util
from run_experiments import run_experiment

def main(exp_configs_path,data_path, dataset_name=None, is_code_testing=False, is_model_test=False):

    # use exp_config for load all configs from data_path/exp_configs
    print("***** Running experiment manager [sequential execution] *****")
    
    exp_configurations = util.load_config_files(os.path.join(data_path, exp_configs_path), "json")

    if exp_configurations is not None:

        all_config_keys = exp_configurations.keys()
        for key in all_config_keys:
            
            # for running all the experiments, I need to load all the config files in folder experiment_specs and move the following code in saperate function for running experiments in parallel
            # in that function I also need to check if some code has crashed and what files are present the the result_dir. 
            # If the trained model is saved, then I might need to resume for evaluation process only
            config = exp_configurations[key]
            config["dataset_name"] = dataset_name # dataset name is not give in autogenerated configs, therefore, dataset name is received in parameters

            # negative sampling code requires to have both train and dev [validation] sets; therefore,
            # explicity changing to dev mode, because autogenerated configs using existing code have is_dev = False
            config["is_dev"] = True 

            run_experiment(exp_configurations[key], data_path, is_code_testing, dataset_name, is_model_test)
          
    else:
        print("Configuration files do not exist on path: {}".format(exp_configs_path))
    

import argparse

if __name__=='__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('exp_configs_path')
    parser.add_argument('data_path')
    #parser.add_argument('test_dataset_name', type=str, default=None, nargs ='?')
    parser.add_argument('dataset_name')
    parser.add_argument('--test_code', dest='is_code_testing', action='store_true', help='A boolean flag')
    parser.add_argument('--test_model', dest='is_model_testing', action='store_true', help='A boolean flag')
    
    args = parser.parse_args()
    main(args.exp_configs_path,args.data_path, args.dataset_name, args.is_code_testing, args.is_model_testing)
